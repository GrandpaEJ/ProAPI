"""
Example of API documentation with ProAPI.
"""

import os
import sys
import time

# Add parent directory to path to import proapi
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from proapi import ProAPI

# Create the application with documentation enabled
app = ProAPI(
    debug=True,
    enable_docs=True,
    docs_url="/docs",
    docs_title="ProAPI Documentation Example"
)

# Define routes with detailed docstrings

@app.get("/")
def index(request):
    """
    Home page.
    
    Returns a welcome message and a list of available endpoints.
    """
    return {
        "message": "Welcome to the ProAPI documentation example!",
        "endpoints": [
            {"path": "/", "method": "GET", "description": "This endpoint"},
            {"path": "/users", "method": "GET", "description": "Get all users"},
            {"path": "/users/{id}", "method": "GET", "description": "Get a user by ID"},
            {"path": "/users", "method": "POST", "description": "Create a new user"},
            {"path": "/users/{id}", "method": "PUT", "description": "Update a user"},
            {"path": "/users/{id}", "method": "DELETE", "description": "Delete a user"}
        ]
    }

@app.get("/users")
def get_users(request):
    """
    Get all users.
    
    Returns a list of all users in the system.
    """
    return {
        "users": [
            {"id": 1, "name": "John Doe", "email": "john@example.com"},
            {"id": 2, "name": "Jane Smith", "email": "jane@example.com"}
        ]
    }

@app.get("/users/{id:int}")
def get_user(id, request):
    """
    Get a user by ID.
    
    Returns a user with the specified ID, or a 404 error if the user is not found.
    """
    # Simulate database lookup
    users = [
        {"id": 1, "name": "John Doe", "email": "john@example.com"},
        {"id": 2, "name": "Jane Smith", "email": "jane@example.com"}
    ]
    
    for user in users:
        if user["id"] == id:
            return user
    
    return {"error": "User not found"}, 404

@app.post("/users")
def create_user(request):
    """
    Create a new user.
    
    Creates a new user with the provided data and returns the created user.
    
    The request body should contain:
    - name: The user's name
    - email: The user's email address
    """
    # Get the request data
    data = request.json
    
    # Validate the data
    if not data:
        return {"error": "No data provided"}, 400
    
    if "name" not in data:
        return {"error": "Name is required"}, 400
    
    if "email" not in data:
        return {"error": "Email is required"}, 400
    
    # Create the user (simulate database insert)
    user = {
        "id": 3,  # In a real app, this would be generated by the database
        "name": data["name"],
        "email": data["email"],
        "created_at": time.time()
    }
    
    return user, 201

@app.put("/users/{id:int}")
def update_user(id, request):
    """
    Update a user.
    
    Updates a user with the specified ID and returns the updated user.
    
    The request body should contain one or more of:
    - name: The user's name
    - email: The user's email address
    """
    # Get the request data
    data = request.json
    
    # Validate the data
    if not data:
        return {"error": "No data provided"}, 400
    
    # Simulate database lookup
    users = [
        {"id": 1, "name": "John Doe", "email": "john@example.com"},
        {"id": 2, "name": "Jane Smith", "email": "jane@example.com"}
    ]
    
    for i, user in enumerate(users):
        if user["id"] == id:
            # Update the user
            updated_user = {**user, **data}
            updated_user["updated_at"] = time.time()
            
            # In a real app, this would update the database
            users[i] = updated_user
            
            return updated_user
    
    return {"error": "User not found"}, 404

@app.delete("/users/{id:int}")
def delete_user(id, request):
    """
    Delete a user.
    
    Deletes a user with the specified ID and returns a success message.
    """
    # Simulate database lookup
    users = [
        {"id": 1, "name": "John Doe", "email": "john@example.com"},
        {"id": 2, "name": "Jane Smith", "email": "jane@example.com"}
    ]
    
    for i, user in enumerate(users):
        if user["id"] == id:
            # In a real app, this would delete from the database
            del users[i]
            
            return {"message": f"User {id} deleted successfully"}
    
    return {"error": "User not found"}, 404

if __name__ == "__main__":
    print(f"API documentation available at: http://127.0.0.1:8006/docs")
    print(f"JSON documentation available at: http://127.0.0.1:8006/docs/json")
    app.run(host="127.0.0.1", port=8006)
